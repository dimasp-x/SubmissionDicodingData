# -*- coding: utf-8 -*-
"""Submission Bike Data Analysis_Dimas Prayoga.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ivE7hKcAtGL38Eosshv0QAFxCevjP0dm

# Proyek Analisis Data: Bike Sharing Dataset
- Nama: Dimas Prayoga
- Email: dmsprayoga7@gmail.com
- Id Dicoding: dimas_prayoga_dx

## Menentukan Pertanyaan Bisnis

- Bagaimana perbandingan performa penyewaan sepeda per bulan antara tahun 2011 dan 2012?

- Musim apa yang memiliki jumlah penyewaan sepeda paling rendah selama tahun 2011 hingga 2012?

- Cuaca apa yang memiliki jumlah penyewaan paling tinggi selama tahun 2011 hingga 2012?

- Bagaimana pola penyewaaan pelanggan casual dan registered per bulan pada tahun 2011 & 2012?

- Bagaimana pola penyewaan sepeda pada hari libur jika dibandingkan dengan hari kerja berdasarkan jam-nya?

## Menyiapkan semua library yang dibutuhkan
"""

import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    import seaborn as sns
    import os

"""## Data Wrangling

### Gathering Data

Mengimpor Dataset `day.csv` dan `hour.csv` dari Github ke Colab
"""

hour_df = pd.read_csv("https://raw.githubusercontent.com/dimasp-x/SubmissionDicodingData/main/hour.csv")
day_df = pd.read_csv("https://raw.githubusercontent.com/dimasp-x/SubmissionDicodingData/main/day.csv")

day_df.head()

hour_df.head()

"""### Assessing Data

####Menilai tabel `day_df`
"""

day_df.info()

day_df.describe()

print('Jumlah Missing Value :\n', day_df.isna().sum())

print('Jumlah data duplicate :', day_df.duplicated().sum())

day_df.nunique()

day_df.describe()

"""####Menilai tabel `hour_df`"""

hour_df.info()

hour_df.describe()

print('Jumlah Missing Value :\n', hour_df.isna().sum())

print('Jumlah data duplicate :', hour_df.duplicated().sum())

hour_df.nunique()

hour_df.describe()

"""####Kesimpulan Assesment
Setelah menilai kedua data antara `day_df` dan `hour_df`, dapat disimpulkan bahwa data sudah bersih atau *clean*. Namun, proses *cleaning* akan tetap dijalankan.

### Cleaning Data

####Membersihkan tabel `day_df`

Duplicated Data
"""

day_df.duplicated().sum()

"""- Menghapus seluruh nilai *duplicate*"""

day_df.drop_duplicates(inplace=True)

"""Missing Value"""

day_df.isna().sum()

"""- Imputasi nilai-nilai yang hilang dapat diisi dengan nilai median atau rata-rata (*mean*)"""

day_df.fillna(day_df.median(numeric_only=True), inplace=True)

day_df.fillna(day_df.mean(numeric_only=True), inplace=True)

"""Innacurate Value"""

day_df.describe()

"""- Mengecek *outliers* pada kolom 'temp'

**Invers Normalisasi**, untuk mengetahui nilai asli dari temp, atemp, hum, dan windspeed. Hal ini dilakukan untuk menemukan nilai yang tidak akurat dan *outliers*
"""

day_df['temp'] = day_df['temp'] * 41
day_df['atemp'] = day_df['atemp'] * 50
day_df['hum'] = day_df['hum'] * 100
day_df['windspeed'] = day_df['windspeed'] * 67

outlier_temp = day_df[(day_df['temp'] < -10) | (day_df['temp'] > 41)]

print("Nilai 'temp' yang tidak akurat:")
print(outlier_temp)

"""Mentransform nilai pada kolom 'mnth' dan 'season' menjadi nilai sebenarnya yaitu nama-nama bulan dan musim agar memudahkan analisis"""

# Membuat mapping untuk kolom 'mnth'
bulan_mapping = {
    1: 'Januari',
    2: 'Februari',
    3: 'Maret',
    4: 'April',
    5: 'Mei',
    6: 'Juni',
    7: 'Juli',
    8: 'Agustus',
    9: 'September',
    10: 'Oktober',
    11: 'November',
    12: 'Desember'
}

# Membuat mapping untuk kolom 'season'
musim_mapping = {
    1: 'Spring',
    2: 'Summer',
    3: 'Fall',
    4: 'Winter'
}

day_df['mnth'] = day_df['mnth'].map(bulan_mapping)

day_df['season'] = day_df['season'].map(musim_mapping)

day_df['yr'] = day_df['yr'].map({0: 2011, 1: 2012})

print(day_df[['mnth', 'season', 'yr']])

"""####Membersihkan tabel `hour_df`

Duplicated Data
"""

hour_df.duplicated().sum()

"""- Menghapus seluruh nilai *duplicate*"""

hour_df.drop_duplicates(inplace=True)

"""Missing Value"""

hour_df.isna().sum()

"""- Imputasi nilai-nilai yang hilang dapat diisi dengan nilai median atau rata-rata (*mean*)"""

hour_df.fillna(hour_df.median(numeric_only=True), inplace=True)

day_df.fillna(day_df.mean(numeric_only=True), inplace=True)

"""Innacurate Value"""

hour_df.describe()

"""- Mengecek *outliers* pada kolom 'temp'"""

outlier_temp = hour_df[(hour_df['temp'] < -10) | (hour_df['temp'] > 41)]

print("Nilai 'temp' yang tidak akurat:")
print(outlier_temp)

"""- Membersihkan nilai 'temp' yang tidak akurat"""

hour_df['temp'] = hour_df['temp'].apply(lambda x: x if -10 <= x <= 41 else None)

"""**Invers Normalisasi**, untuk mengetahui nilai asli dari temp, atemp, hum, dan windspeed. Hal ini dilakukan untuk menemukan nilai yang tidak akurat dan *outliers*"""

hour_df['temp'] = hour_df['temp'] * 41
hour_df['atemp'] = hour_df['atemp'] * 50
hour_df['hum'] = hour_df['hum'] * 100
hour_df['windspeed'] = hour_df['windspeed'] * 67

"""Mentransform nilai pada kolom 'mnth' dan 'season' menjadi nilai sebenarnya yaitu nama-nama bulan dan musim agar memudahkan analisis"""

# Membuat mapping untuk kolom 'mnth'
bulan_mapping = {
    1: 'Januari',
    2: 'Februari',
    3: 'Maret',
    4: 'April',
    5: 'Mei',
    6: 'Juni',
    7: 'Juli',
    8: 'Agustus',
    9: 'September',
    10: 'Oktober',
    11: 'November',
    12: 'Desember'
}

# Membuat mapping untuk kolom 'season'
musim_mapping = {
    1: 'Spring',
    2: 'Summer',
    3: 'Fall',
    4: 'Winter'
}

hour_df['mnth'] = hour_df['mnth'].map(bulan_mapping)

hour_df['season'] = hour_df['season'].map(musim_mapping)

hour_df['yr'] = hour_df['yr'].map({0: 2011, 1: 2012})

print(hour_df[['mnth','season', 'yr']])

"""## Exploratory Data Analysis (EDA)

### Explore `day_df`
"""

print('Apakah instant merupakan variabel yang unik? ', day_df.instant.is_unique)

day_df.sample(5)

day_df.describe(include="all")

"""- **Pivot table menggunakan kolom 'instant'**, untuk mengetahui jumlah penyewaan per-hari"""

day_df.groupby(by='dteday').cnt.sum()

"""- **Pivot table menggunakan kolom 'season' dan 'yr'**, untuk mengetahui total penyewaan sepeda pada `day_df` per musim pada tahun 2011(0) dan 2012(1). Dapat dilihat bahwa jumlah penyewaan tertinggi berada pada Musim Gugur(3) pada tahun 2012."""

day_df.groupby(by=['season', 'yr']).agg({
    "instant": "nunique",
    "cnt": "sum"
})

"""- **Pivot table menggunakan kolom 'weekday', 'workingday', 'holiday'**, untuk mengetahui total penyewaan sepeda pada `day_df` untuk setiap kombinasi dari kolom tersebut. Dapat dilihat bahwa jumlah penyewaan tertinggi ada pada hari Kamis(4) yang merupakan hari kerja."""

day_df.groupby(by=['weekday', 'workingday', 'holiday']).agg({
    "instant": "nunique",
    "cnt": "sum"
})

"""- **Pivot table menggunakan kolom 'weathersit'**, untuk mengetahui total penyewaan sepeda pada `day_df` untuk setiap cuaca pada tahun 2011 dan 2012"""

day_df.groupby(by=['weathersit','yr']).agg({
    "instant": "nunique",
    "cnt": "sum"
})

"""- Pivot table untuk mengetahui jumlah customer casual dan registered dari tiap musim dan tahun pada `day_df`"""

pd.pivot_table(day_df, values=['casual', 'registered'], index=['season', 'yr'], aggfunc='sum')

"""###Explore `hour_df`"""

hour_df.sample(5)

hour_df.head()

hour_df.describe(include="all")

"""- **Pivot table menggunakan kolom 'dteday'**, untuk mengetahui jumlah penyewaan per-hari pada `hour_df`"""

hour_df.groupby(by='dteday').cnt.sum()

"""- **Pivot table menggunakan kolom 'weathersit'**, untuk mengetahui total penyewaan sepeda pada `hour_df` dengan kombinasi cuaca dan jam. Dapat dilihat bahwa penyewaan sepeda terbanyak ada pada cuaca Cerah pada pukul 17.00."""

hour_df.groupby(by=['weathersit','hr']).agg({
    "instant": "nunique",
    "cnt": "sum"
}).sort_values(by="cnt", ascending=False)

"""- Pivot table untuk mengetahui jumlah customer casual dan registered dari tiap musim dan tahun pada `hour_df`"""

pd.pivot_table(hour_df, values=['casual', 'registered'], index=['season', 'yr'], aggfunc='sum')

"""###Explore all data

Menggabungkan `day_df` dan `hour_df`, karena kolom season, mnth, holiday, weekday, workingday memiliki nilai yang sama maka hanya akan menambahkan beberapa kolom dari `hour_df`
"""

all_df = pd.merge(day_df, hour_df[['instant','dteday', 'hr','weathersit','temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']]
, on='dteday', how='left', suffixes=('_day', '_hour'))

all_df.head()

all_df.groupby(by=["season", "yr"]).agg({
    "casual_hour": ["min", "max", "sum"],
    "registered_hour": ["min", "max", "sum"],
    "casual_day": ["min", "max"],
    "registered_day": ["min", "max"]
})

"""## Visualization & Explanatory Analysis

### Pertanyaan 1: Bagaimana perbandingan performa penyewaan sepeda per bulan antara tahun 2011 dan 2012?

- Membuat dataframe `total_per_bulan` dengan menggunakan groupby, kemudian mengurutkan variabel bulan dan tahunnya untuk memudahkan analisis.
"""

total_per_bulan = all_df.groupby(by=['mnth','yr']).cnt_hour.sum().reset_index()

total_per_bulan['mnth'] = pd.Categorical(total_per_bulan['mnth'], categories=[
    'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
], ordered=False)

total_per_bulan = total_per_bulan.sort_values(by=['yr', 'mnth'])
print(total_per_bulan)

print(total_per_bulan.columns)

"""- Memisahkan data tahun 2011 dan 2012 dari `total_per_bulan`"""

data_2011 = total_per_bulan[total_per_bulan['yr'] == 2011]
data_2012 = total_per_bulan[total_per_bulan['yr'] == 2012]

print(data_2011.columns)
data_2011.head(12)

print(data_2012.columns)
data_2012.head(12)

"""- Membuat line chart untuk membandingkan total penyewaan per bulan antara tahun 2011 dan 2012"""

plt.figure(figsize=(10, 6))

plt.plot(data_2011['mnth'], data_2011['cnt_hour'], label='2011', marker='o')
plt.plot(data_2012['mnth'], data_2012['cnt_hour'], label='2012', marker='o')


plt.title('Perbandingan Total Penyewaan Sepeda Per Bulan (2011-2012)')
plt.xlabel('Bulan')
plt.xticks(rotation=15)
plt.ylabel('Total Penyewaan')

plt.legend()
plt.grid(True)
plt.show()

"""### Pertanyaan 2: Musim apa yang memiliki jumlah penyewaan sepeda paling rendah selama tahun 2011 hingga 2012?

- Membuat dataframe `total_per_musim` untuk memudahkan analisis
"""

total_per_musim = all_df.groupby('season')['cnt_hour'].sum().reset_index()
total_per_musim.head()

"""- Membuat diagram batang atau bar plot sebagai visualisasi dari `total_per_musim`"""

plt.figure(figsize=(10, 5))

total_per_musim_sorted = total_per_musim.sort_values(by="cnt_hour", ascending=False)

colors_ = ["#D3D3D3", "#D3D3D3", "#D3D3D3", "#FF6347"]

ax = sns.barplot(x="cnt_hour", y="season", data=total_per_musim_sorted, palette=colors_)

for index, value in enumerate(total_per_musim_sorted["cnt_hour"]):
    ax.text(value, index, f'{value:,}', ha='left', va='center', fontsize=10, color='black')

plt.title("Musim Dengan Jumlah Penyewaan Sepeda Paling Rendah", loc="center", fontsize=15)
plt.ylabel(None)
plt.xlabel(None)
plt.tick_params(axis='y', labelsize=12)

plt.show()

"""### Pertanyaan 3:  Cuaca apa yang memiliki jumlah penyewaan paling tinggi selama tahun 2011 hingga 2012?

- Membuat dataframe `total_per_cuaca` untuk memudahkan analisis
"""

total_per_cuaca = all_df.groupby('weathersit_hour')['cnt_hour'].sum().reset_index()
total_per_cuaca.head()

"""- Membuat bar plot sebagai visualisasi dari `total_per_cuaca`"""

plt.figure(figsize=(10, 6))

total_per_cuaca_sorted = total_per_cuaca.sort_values(by='cnt_hour')

palette = sns.color_palette("muted")

ax = sns.barplot(x='weathersit_hour', y='cnt_hour', data=total_per_cuaca_sorted, palette=palette)

for p in ax.patches:
    ax.annotate(f'{p.get_height():,.0f}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points', fontsize=10, color='black')

legend_labels = {
    1: "Cerah/Sejuk",
    2: "Berawan/Kabut",
    3: "Hujan Ringan",
    4: "Hujan Lebat"
}

handles = [plt.Rectangle((0, 0), 1, 1, color=palette[i]) for i in range(len(legend_labels))]
plt.legend(handles, legend_labels.values(), loc="upper right")

plt.title('Jumlah Penyewaan Sepeda Berdasarkan Kondisi Cuaca')
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Jumlah Penyewaan Sepeda')
plt.show()

"""### Pertanyaan 4 : Bagaimana pola penyewaaan pelanggan casual dan registered per bulan pada tahun 2011 & 2012?

- Menyiapkan data yang diperlukan dan membuat dataframe `cust_per_bulan` untuk memudahkan analisis
"""

all_df['dteday'] = pd.to_datetime(all_df['dteday'])

cust_per_bulan = all_df.resample(rule='M', on='dteday').agg({
    "casual_hour": "sum",
    "registered_hour": "sum"
})

cust_per_bulan.index = cust_per_bulan.index.strftime('%B %Y')

"""- Memisahkan data tahun 2011 dan 2012 dari dataframe `cust_per_bulan`"""

data_2011 = cust_per_bulan[cust_per_bulan.index.str.contains('2011')]
data_2012 = cust_per_bulan[cust_per_bulan.index.str.contains('2012')]

"""- Membuat double bar plot untuk pola penyewaan pelanggan casual dan registered per bulan (Tahun 2011)"""

plt.figure(figsize=(12, 6))
bar_width = 0.35
index_2011 = range(len(data_2011))

plt.bar(index_2011, data_2011['casual_hour'], width=bar_width, label='Casual', color='lightblue')
plt.bar([i + bar_width for i in index_2011], data_2011['registered_hour'], width=bar_width, label='Registered', color='orange')

plt.title('Pola Penyewaan Pelanggan Casual dan Registered (2011)')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penyewaan')
plt.xticks([i + bar_width/2 for i in index_2011], data_2011.index, rotation=45)
plt.legend()
plt.grid(True)
plt.show()

"""- Membuat double bar plot untuk pola penyewaan pelanggan casual dan registered per bulan (Tahun 2012)"""

plt.figure(figsize=(12, 6))
bar_width = 0.35
index_2012 = range(len(data_2012))

plt.bar(index_2012, data_2012['casual_hour'], width=bar_width, label='Casual', color='lightblue')
plt.bar([i + bar_width for i in index_2012], data_2012['registered_hour'], width=bar_width, label='Registered', color='orange')

plt.title('Pola Penyewaan Pelanggan Casual dan Registered (2012)')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Penyewaan')
plt.xticks([i + bar_width/2 for i in index_2012], data_2012.index, rotation=45)
plt.legend()
plt.grid(True)
plt.show()

"""### Pertanyaan 5 : Bagaimana pola penyewaan sepeda pada hari libur jika dibandingkan dengan hari kerja berdasarkan jam-nya?

- Memisahkan dan memilih kolom yang diperlukan
"""

selected_columns = ['holiday', 'hr', 'cnt_hour']
df_selected = all_df[selected_columns]

"""- Membuat visualisasinya dengan memisahkan data antara hari libur dan hari kerja"""

plt.figure(figsize=(12, 6))

df_holiday = df_selected[df_selected['holiday'] == 1]
df_workday = df_selected[df_selected['holiday'] == 0]

sns.pointplot(data=df_workday, x='hr', y='cnt_hour', color='blue', markers=['o'], linestyles=['-'], label='Hari Kerja')
sns.pointplot(data=df_holiday, x='hr', y='cnt_hour', color='orange', markers=['o'], linestyles=['--'], label='Hari Libur')

plt.xlabel('Jam')
plt.ylabel('Jumlah Penyewaan Sepeda')
plt.title('Pola Penyewaan Sepeda pada Hari Libur dan Hari Kerja Berdasarkan Jam')
plt.legend(title='Jenis Hari')
plt.show()

"""### Analisis Lanjutan : Linear Regression

- Import library untuk Analisis Regresi
"""

import statsmodels.api as sm

"""- Fitur yang akan digunakan untuk membuat model regresi linier merupakan 'temp_hour', 'atemp_hour', 'hum_hour', dan  'windspeed_hour'. Fitur 'cnt_hour' adalah variabel dependen."""

X = all_df[['temp_hour', 'atemp_hour', 'hum_hour', 'windspeed_hour']]
y = all_df['cnt_hour']

X = sm.add_constant(X)

model = sm.OLS(y, X).fit()
print(model.summary())

"""- Membuat visualisasi model regresi dengan Residual Plot"""

plt.scatter(model.predict(), model.resid)
plt.axhline(y=0, color='r', linestyle='--')
plt.title('Residual Plot')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.show()

"""## Conclusion

- **Conclution pertanyaan 1** : Berdasarkan grafik yang disajikan, terlihat adanya peningkatan secara umum pada tahun 2012 dibandingkan dengan tahun 2011. Namun, pola menunjukkan adanya penurunan jumlah penyewaan di akhir dan awal tahun, sementara terdapat peningkatan yang signifikan pada bulan Februari dan seterusnya. Hal ini diharapkan dapat membantu memahami tren serta menjadi tambahan pertimbangan pengambilan keputusan misalnya dalam menyesuaikan stok, personel, dan sumber daya lainnya sesuai dengan permintaan yang diharapkan.

- **Conclution pertanyaan 2** : Berdasarkan hasil analisis, musim dengan total penyewaan sepeda paling rendah adalah Musim Semi (Spring) dengan total penyewaan 471,348, yang memiliki perbedaan cukup jauh dengan musim lainnya. Oleh karena itu, disarankan untuk memperhatikan faktor-faktor yang mungkin memengaruhi preferensi pelanggan selama Musim Semi dan mengambil langkah-langkah strategis untuk meningkatkan kinerja penyewaan selama periode ini.

- **Conclution pertanyaan 3** : Berdasarkan grafik batang yang telah ditampilkan, jumlah penyewaan tertinggi terjadi pada cuaca cerah/sejuk, dengan perbedaan yang cukup jauh dibandingkan dengan kondisi cuaca lainnya, yaitu lebih dari 2 juta penyewaan. Dalam rangka meningkatkan kenyamanan dan keamanan pelanggan, disarankan untuk memberikan penekanan khusus pada penyediaan layanan pada kondisi cuaca tersebut, mungkin dengan menawarkan promosi khusus atau program loyalitas untuk meningkatkan minat penyewaan saat kondisi cuaca yang lebih baik.

- **Conclution pertanyaan 4** : Berdasarkan kedua grafik pola penyewaan customer casual dan registered di atas, terdapat perbedaan yang signifikan antara pelanggan casual dan registered. Namun, memiliki pola yang hampir sama antara tahun 2011 dan 2012, yaitu memiliki jumlah penyewaan tertinggi pada pertengahan hingga akhir tahun. Untuk meningkatkan pemanfaatan layanan, disarankan untuk memahami lebih lanjut preferensi dan kebutuhan khusus dari kedua kelompok pelanggan, sehingga strategi pemasaran dan promosi dapat disesuaikan untuk mencapai pertumbuhan yang lebih baik.

- **Conclution pertanyaan 5** : Jika dilihat pada grafik yang telah ditampilkan, pada hari kerja jumlah penyewaan tertinggi ada pada pukul 8 pagi dan 5 sore yang merupakan waktu berangkat dan pulang kerja/aktivitas, hasil tersebut juga memiliki confidence interval yang relatif kecil. Sedangkan, pada hari libur jumlah penyewaan tertinggi ada pada pukul 1 siang dan 6 sore, tetapi memiliki confidence interval yang cukup tinggi yang menunjukkan ketidakpastian dalam estimasi rata-rata waktu tersebut. Sebagai saran, dapat dipertimbangkan untuk memperkuat promosi atau penawaran spesial pada jam-jam tertentu di hari kerja, terutama pada pukul 8 pagi dan 5 sore, untuk menarik lebih banyak pelanggan. Selain itu, pada hari libur, upayakan untuk meningkatkan ketepatan estimasi rata-rata pada pukul 1 siang dan 6 sore dengan memperbaiki atau menyesuaikan strategi pemasaran agar dapat menarik minat pelanggan pada waktu-waktu tersebut.

- **Conclution Analisis Linear Regression**, Hasil analisis regresi di atas memberikan informasi tentang sejauh mana model regresi linear mampu menjelaskan variasi dalam variabel dependen (cnt_hour).
  - R-squared adalah ukuran seberapa baik variabilitas variabel dependen dapat dijelaskan oleh model. Nilai 0.253 berarti sekitar 25.3% dari variasi dalam jumlah penyewaan sepeda (cnt_hour) dapat dijelaskan oleh model regresi ini.
  - Ketika suhu (temp_hour) naik 1 unit, jumlah penyewaan sepeda (cnt_hour) cenderung meningkat sebanyak 2.0872 unit.
  - Ketika suhu perasaan (atemp_hour) naik 1 unit, jumlah penyewaan sepeda (cnt_hour) cenderung meningkat sebanyak 6.2869 unit.
  - Ketika kelembapan (hum_hour) naik 1 unit, jumlah penyewaan sepeda (cnt_hour) cenderung menurun sebanyak 2.7518 unit.
  - Ketika kecepatan angin (windspeed_hour) naik 1 unit, jumlah penyewaan sepeda (cnt_hour) cenderung meningkat sebanyak 0.6415 unit.

  Kesimpulannya, model regresi ini memiliki R-squared sekitar 25.3%, yang artinya variabel independen yang digunakan mampu menjelaskan sebagian kecil variasi dalam jumlah penyewaan sepeda. Variabel suhu, suhu perasaan, kelembapan, dan kecepatan angin tampaknya memiliki pengaruh signifikan pada jumlah penyewaan sepeda berdasarkan koefisien regresi yang dihasilkan.
"""

